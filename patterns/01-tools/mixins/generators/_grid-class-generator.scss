@import "../pmc-breakpoint";

@mixin _grid( $columns ) {
	--cols: #{$columns};

	> * {
		flex-basis: ( ( 1 / $columns ) * 100% );
	}

}

@mixin _grid-selector( $columns, $breakpoint: false ) {
	@if $breakpoint {
		@include pmc-breakpoint( $breakpoint ) {
			.pmc-cols#{$columns}\@#{$breakpoint} {
				@include _grid( $columns );
			}
		}
	} @else {
		.pmc-cols#{$columns} {
			@include _grid( $columns );
		}
	}
}

@mixin _grid-column( $span, $columns ) {
	flex-basis: ( $span / $columns * 100% );

	@supports ( display: grid ) {
		grid-column: span #{$span};
	}
}

@mixin _grid-span-selector( $columns, $span: 1, $breakpoint: false ) {

	@if $breakpoint {
		@include pmc-breakpoint( $breakpoint ) {
			.pmc-span#{$span}\@#{$breakpoint} {
				@include _grid-column( $span, $columns );
			}
		}
	} @else {
		.pmc-span#{$span} {
			@include _grid-column( $span, $columns );
		}
	}

}

@mixin _grid-class-generator( $tokens ) {

	@if type-of($tokens) != 'list' {
		@error "`#{$tokens}` is not a valid value for $tokens. It must be a list of maps.";
	}

	@each $grid in $tokens {
		$breakpoint: map-get( $grid, breakpoint );
		$columns: map-get( $grid, columns );
		$spans: map-get( $grid, spans );

		// Outputs pmc-colsX selector to be used in conjunction with .pmc-grid.
		@include _grid-selector( $columns, $breakpoint );

		@if $spans {

			@each $span in $spans {

				// Outputs pmc-spanX selector to be used in conjunction with .pmc-grid-item.
				@include _grid-span-selector( 
					$columns,
					$span, 
					map-get( $grid, breakpoint )
				);
			}
		}
	}
}