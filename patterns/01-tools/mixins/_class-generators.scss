//
// Spacing class generator
//
// @param $property: CSS property accepting top/right/bottom/left extensions.
// @param $desired-classes: Nested Sass map containing key: value pairs of 
// sides: token e.g. 'tr' and a spacing token.
//

@mixin _spacing-class-generator( $property, $tokens ) {
	
	@if $property != 'margin' and $property != 'padding' {
		@error "`#{$property}` is not a valid value for $property. It must be either 'margin' or 'padding'.";
	}
	
	@if type-of($tokens) != 'map' {
		@error "`#{$tokens}` is not a valid value for $tokens. It must be map.";
	}

	@each $sides, $token in $tokens {
		$name-in-px: _strip-unit($token) * 16;
		
		.pmc-u-#{$property}-#{$sides}-#{$name-in-px} {
	
			@if (str-index($sides, 't')) {
				#{$property}-top: $token;
			}

			@if (str-index($sides, 'r')) {
				#{$property}-right: $token;
			}

			@if (str-index($sides, 'b')) {
				#{$property}-bottom: $token;
			}

			@if (str-index($sides, 'l')) {
				#{$property}-left: $token;
			}

			@if (str-index($sides, 'a')) {
				#{$property}: $token;
			}
		}
	}
}

@mixin _crop-class-generator( $aspect-ratios ) {

	@if type-of($aspect-ratios) != 'map' {
		@error "`#{$aspect-ratios}` is not a valid value for $aspect-ratios. It must be map.";
	}

	@each $name, $sizes in $aspect-ratios {
		.pmc-u-crop-#{$name} {
			position: relative;
			padding-bottom: calc( ( #{nth($sizes, 1)} / #{nth($sizes, 2)} ) * 100% );

			img {
				position: absolute;
				width: 100%;
				height: 100%;
				object-fit: cover;
			}
		}
	}
}