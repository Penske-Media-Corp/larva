@import "true";
@import "../lib/tools/tools";

@include test-module('Class Generators') {

	@include test('@mixin _spacing-class-generator') {
		@include assert {

			@include output {
				$spacer-050: 0.5rem;
				$spacer-1: 1rem;

				@include _spacing-class-generator(
					'margin',
					(
						('tb', $spacer-050),
						('a', $spacer-1, desktop)
					)
				);

				@include _spacing-class-generator(
					'padding',
					(
						('a', $spacer-1),
					)
				);
			}

			@include expect {
				.pmc-u-margin-tb-050 {
					margin-top: 0.5rem;
					margin-bottom: 0.5rem;
				}

				@media (min-width: 62.5rem) {
					.pmc-u-margin-a-1\@desktop {
						margin: 1rem;
					}
				}

				.pmc-u-padding-a-1 {
					padding: 1rem;
				}
			}
		}
	}

	@include test('@mixin _crop-class-generator') {

		@include assert {

			@include output {
				@include _crop-class-generator( (
					'3x2': (3, 2)
				) );
			}

			@include contains {
				.pmc-a-crop-3x2 {
					padding-bottom: calc( ( 2 / 3 ) * 100% );
				}

				.pmc-a-crop-3x2 img {
					object-fit: cover;
				}
			}
		}
	}

	@include test('@mixin _grid-class-generator') {
		@include assert {

			@include output {
				$grids: (
					(
						columns: 2,
						spans: ( 2, ),
					),
					(
						columns: 3,
						breakpoint: tablet,
						spans: ( 2, ),
					),
				);

				@include _grid-class-generator( $grids );
			}

			@include expect {
				.a-cols2 {
					--cols: 2;
				}

				.a-cols2 > * {
					flex-basis: 50%;
				}

				@supports (display: grid) {
					.a-span2 {
						grid-column: span 2;
					}
				}

				.a-cols2 > .a-span2 {
					flex-basis: 100%;
				}

				@media( min-width: 48rem ) {
					.a-cols3\@tablet {
						--cols: 3;
					}

					.a-cols3\@tablet > * {
						flex-basis: 33.33333%;
					}
				}

				@media( min-width: 48rem ) {

					.a-span2\@tablet {
						@supports ( display: grid ) {
							grid-column: span 2;
						}
					}

					.a-cols3\@tablet > .a-span2\@tablet {
						flex-basis: 66.66667%;
					}
				}
			}

		}
	}

	@include test('@mixin _grid-class-generator, namespaced') {
		@include assert {

			@include output {
				$grids: (
					(
						columns: 2,
						spans: ( 2, ),
					),
					(
						columns: 3,
						breakpoint: tablet,
						spans: ( 2, ),
					),
				);

				@include _grid-class-generator( $grids, $namespace: 'lrv-' );
			}

			@include expect {
				.lrv-a-cols2 {
					--cols: 2;
				}

				.lrv-a-cols2 > * {
					flex-basis: 50%;
				}

				@supports (display: grid) {
					.lrv-a-span2 {
						grid-column: span 2;
					}
				}

				.lrv-a-cols2 > .lrv-a-span2 {
					flex-basis: 100%;
				}

				@media( min-width: 48rem ) {
					.lrv-a-cols3\@tablet {
						--cols: 3;
					}

					.lrv-a-cols3\@tablet > * {
						flex-basis: 33.33333%;
					}
				}

				@media( min-width: 48rem ) {

					.lrv-a-span2\@tablet {
						@supports ( display: grid ) {
							grid-column: span 2;
						}
					}

					.lrv-a-cols3\@tablet > .lrv-a-span2\@tablet {
						flex-basis: 66.66667%;
					}
				}
			}

		}
	}

	@include test('@mixin _text-class-generator') {

		@include assert {

			@include output {

				$font-size-1: 1rem;
				$font-size-2: 2rem;

				$font-weights: (
					bold: 600,
				);

				$line-heights: (
					sm: 1,
					md: 2,
					lg: 3,
				);

				$font-family-balto: Balto, sans-serif;

				$font-families: (
					balto: ($font-family-balto, 'web',),
					helvetica: (Helvetica, 'system',),
				);


				@include _text-class-generator(
					'font-size',
					(
						( $font-size-1, ),
						( $font-size-2, desktop, )
					)
				);

				@include _text-class-generator(
					'line-height',
					(
						sm,
					),
					$line-heights
				);

				@include _text-class-generator(
					'font-weight',
					(
						bold,
					),
					$font-weights
				);

				@include _text-class-generator(
					'font-family',
					(
						balto,
						helvetica
					),
					$font-families
				);
			}

			@include expect {
				.pmc-u-font-size-16 {
					font-size: 1rem;
				}

				@media( min-width: 62.5rem ) {
					.pmc-u-font-size-32\@desktop {
						font-size: 2rem;
					}
				}

				.pmc-u-line-height-sm {
					line-height: 1;
				}

				.pmc-u-font-weight-bold {
					font-weight: 600;
				}

				.wf-active .pmc-u-font-family-balto {
					font-family: Balto, sans-serif;
				}

				.pmc-u-font-family-helvetica {
					font-family: Helvetica;
				}
			}

		}
	}
}

@include test-module('Color Generators') {

	@include test('@mixin _color-class-generator') {
		@include assert {

			@include output {
				$semantic_list: (
					brand-red: red,
				);

				@include _color-class-generator(
					'background-color',
					(
						brand-red,
					),
					$semantic_list,
				);
			}

			@include expect {
				.pmc-u-background-brand-red {
					background-color: red;
				}
			}
		}
	}
}

@include test-module('@mixin larva-utility-generator') {
	$map: (
		background-color-brand-primary: #FF00AA,
		text-color-grey-light: #CCCCCC,
	);

	@include test('generates background color') {
		@include assert {

			@include output {

				@include larva-utility-generator(
					'background-color',
					(
						background-color-brand-primary,
					),
					$map,
				);
			}

			@include expect {
				.u-background-color-brand-primary {
					background-color: #FF00AA;
					background-color: var( --background-color-brand-primary, #FF00AA );
				}
			}
		}
	}

	@include test('generates text color') {
		@include assert {

			@include output {
				
				@include larva-utility-generator(
					'color',
					(
						text-color-grey-light,
					),
					$map,
				);
			}

			@include expect {
				.u-text-color-grey-light {
					color: #CCCCCC;
					color: var( --text-color-grey-light, #CCCCCC );
				}
			}
		}
	}
}


@include test-module('@mixin project-utility-generator') {
	$map: (
		opacity-1: 1,
	);

	@include test('generates opacity') {
		@include assert {

			@include output {
				
				@include project-utility-generator(
					'opacity',
					(
						opacity-1,
					),
					$map,
				);
			}

			@include expect {
				.u-opacity-1 {
					opacity: 1;
				}
			}
		}
	}
}
